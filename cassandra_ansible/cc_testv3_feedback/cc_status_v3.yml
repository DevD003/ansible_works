--- # Main Playbook to Configure Cassandra Cluster
- hosts: all
  gather_facts: yes
  become: yes

  vars:
    servicename: cassandra

  tasks:

   - name: Check if Service Exists
     stat: 'path=/etc/init.d/{{ servicename }}'
     register: servicestatus

   - name: Show service status
     debug: msg='{{ servicename }} service exists.'
     when: servicestatus.stat.exists 

   - name: ensure cassandra is running
     service:
        name: "{{ servicename }}"
        state: started
        enabled: yes
     register: cassandra_status

   - debug:
       msg: "{{ item }}"
     with_items: 
         - '{{ cassandra_status["name"] }}'  
         - '{{ cassandra_status["state"] }}'
         - '{{ cassandra_status["enabled"] }}'
         - '{{ cassandra_status["status"]["Id"] }}'
         - '{{ cassandra_status["status"]["ActiveEnterTimestamp"] }}' 
         - '{{ cassandra_status["status"]["LoadState"] }}'    
         - '{{ cassandra_status["status"]["ActiveState"] }}' 
         - '{{ cassandra_status["status"]["MainPID"] }}'  
         - '{{ cassandra_status["status"]["Result"] }}' 
         - '{{ cassandra_status["status"]["SubState"] }}' 
   
   - name: Cassandra Service Status Registering
     command: touch /root/{{ cassandra_status["name"] }}_{{ cassandra_status["status"]["ActiveEnterTimestamp"] }}.log  
   - copy: 
#      content: '{{ item }}' 
      dest: /root/{{ cassandra_status["name"] }}_at_{{ cassandra_status["status"]["ActiveEnterTimestamp"] }}.log
      line: last
      with_items:
         - Name= '{{ cassandra_status["name"] }}'
         - State= '{{ cassandra_status["state"] }}'
         - Enabled= '{{ cassandra_status["enabled"] }}'
         - ID= '{{ cassandra_status["status"]["Id"] }}'
         - Start= '{{ cassandra_status["status"]["ActiveEnterTimestamp"] }}'
         - Load_State= '{{ cassandra_status["status"]["LoadState"] }}'
         - Active= '{{ cassandra_status["status"]["ActiveState"] }}'
         - PID= '{{ cassandra_status["status"]["MainPID"] }}'
         - Result= '{{ cassandra_status["status"]["Result"] }}

#   - name: Show service status
#     debug: msg='{{ servicename }} service no errors.'
 
#   - debug: msg="Cassandra is running"
#:wq 
######     when: cassandra_status.stdout.find("running") != -1
